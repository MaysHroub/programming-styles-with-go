// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: word_freq_data.sql

package database

import (
	"context"
)

const addDocument = `-- name: AddDocument :one
INSERT INTO
    documents (name)
VALUES
    (?)
RETURNING
    id, name
`

func (q *Queries) AddDocument(ctx context.Context, name string) (Document, error) {
	row := q.db.QueryRowContext(ctx, addDocument, name)
	var i Document
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const addStopWord = `-- name: AddStopWord :exec
INSERT INTO
    stopwords (val)
VALUES
    (?)
`

func (q *Queries) AddStopWord(ctx context.Context, val string) error {
	_, err := q.db.ExecContext(ctx, addStopWord, val)
	return err
}

const addWord = `-- name: AddWord :one
INSERT INTO
    words (val, doc_id)
VALUES
    (?, ?)
RETURNING
    id, val, doc_id
`

type AddWordParams struct {
	Val   string
	DocID int64
}

func (q *Queries) AddWord(ctx context.Context, arg AddWordParams) (Word, error) {
	row := q.db.QueryRowContext(ctx, addWord, arg.Val, arg.DocID)
	var i Word
	err := row.Scan(&i.ID, &i.Val, &i.DocID)
	return i, err
}

const getWordsFreq = `-- name: GetWordsFreq :many
SELECT
    w.val AS word,
    COUNT(*) AS freq
FROM
    words w
    JOIN documents d ON d.id = w.doc_id
    LEFT JOIN stopwords sw ON sw.val = w.val
WHERE
    d.id = ?
    AND sw.val IS NULL
GROUP BY
    w.val
ORDER BY
    freq DESC
`

type GetWordsFreqRow struct {
	Word string
	Freq int64
}

func (q *Queries) GetWordsFreq(ctx context.Context, id int64) ([]GetWordsFreqRow, error) {
	rows, err := q.db.QueryContext(ctx, getWordsFreq, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWordsFreqRow
	for rows.Next() {
		var i GetWordsFreqRow
		if err := rows.Scan(&i.Word, &i.Freq); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
