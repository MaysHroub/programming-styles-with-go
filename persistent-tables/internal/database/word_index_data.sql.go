// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: word_index_data.sql

package database

import (
	"context"
)

const addPage = `-- name: AddPage :exec
INSERT INTO
    pages (number, word_id)
VALUES
    (?, ?)
`

type AddPageParams struct {
	Number int64
	WordID int64
}

func (q *Queries) AddPage(ctx context.Context, arg AddPageParams) error {
	_, err := q.db.ExecContext(ctx, addPage, arg.Number, arg.WordID)
	return err
}

const getWordPagesPairs = `-- name: GetWordPagesPairs :many
WITH
    top_words AS (
        SELECT
            w1.val AS word,
            w1.doc_id
        FROM
            words w1
        WHERE
            w1.doc_id = ?
            AND w1.val <> ''
        GROUP BY
            w1.val
        HAVING
            COUNT(*) <= 100
        ORDER BY
            w1.val ASC
        LIMIT
            ?
    )
SELECT DISTINCT
    w.val AS word,
    p.number AS page_number
FROM
    words w
    JOIN pages p ON p.word_id = w.id
    JOIN top_words t ON t.word = w.val
WHERE
    w.doc_id = t.doc_id
ORDER BY
    word ASC
`

type GetWordPagesPairsParams struct {
	DocID int64
	Limit int64
}

type GetWordPagesPairsRow struct {
	Word       string
	PageNumber int64
}

func (q *Queries) GetWordPagesPairs(ctx context.Context, arg GetWordPagesPairsParams) ([]GetWordPagesPairsRow, error) {
	rows, err := q.db.QueryContext(ctx, getWordPagesPairs, arg.DocID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWordPagesPairsRow
	for rows.Next() {
		var i GetWordPagesPairsRow
		if err := rows.Scan(&i.Word, &i.PageNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
